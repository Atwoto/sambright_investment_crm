{
    "name": "AI Color Advisor Workflow",
    "nodes": [
        {
            "parameters": {
                "httpMethod": "POST",
                "path": "ai-color-advisor",
                "responseMode": "responseNode",
                "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
                240,
                300
            ],
            "webhookId": "ai-color-advisor-webhook"
        },
        {
            "parameters": {
                "url": "https://openrouter.ai/api/v1/chat/completions",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "Content-Type",
                            "value": "application/json"
                        }
                    ]
                },
                "sendBody": true,
                "bodyParameters": {
                    "parameters": []
                },
                "jsonBody": "={{ {\n  \"model\": \"google/gemini-2.0-flash-exp\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"You are an expert color consultant specializing in exterior house painting. Analyze the provided house images and generate exactly 3 distinct, professional color palette recommendations.\\n\\nFor each recommendation, provide a JSON object with these exact keys:\\n- name: A descriptive name for the color scheme\\n- colors: An array of 3-5 specific color names (e.g., ['Charcoal Gray', 'Cream White', 'Forest Green'])\\n- application: Brief description of which colors go where (e.g., 'Charcoal Gray for siding, Cream White for trim, Forest Green for shutters')\\n- reasoning: Detailed explanation of why this palette works for this house\\n\\nReturn ONLY a valid JSON array of exactly 3 recommendation objects. No additional text or formatting.\"\n        },\n        ...{{ $json.base64Images.map(img => ({ type: 'image_url', image_url: { url: img } })) }}\n      ]\n    }\n  ],\n  \"max_tokens\": 1000,\n  \"temperature\": 0.7\n} }}",
                "options": {}
            },
            "id": "get-color-recommendations",
            "name": "Get Color Recommendations",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [
                460,
                300
            ],
            "credentials": {
                "httpHeaderAuth": {
                    "id": "openrouter-api-key",
                    "name": "OpenRouter API Key"
                }
            }
        },
        {
            "parameters": {
                "jsCode": "// Parse the AI response and extract recommendations\ntry {\n  const response = $input.first().json;\n  const content = response.choices[0].message.content;\n  \n  // Clean the content and parse JSON\n  let cleanContent = content.trim();\n  if (cleanContent.startsWith('```json')) {\n    cleanContent = cleanContent.replace(/```json\\n?/, '').replace(/\\n?```$/, '');\n  }\n  \n  const recommendations = JSON.parse(cleanContent);\n  \n  // Validate that we have exactly 3 recommendations\n  if (!Array.isArray(recommendations) || recommendations.length !== 3) {\n    throw new Error('Expected exactly 3 recommendations');\n  }\n  \n  // Add unique IDs and ensure proper structure\n  const processedRecommendations = recommendations.map((rec, index) => ({\n    id: `rec_${index + 1}`,\n    description: rec.name || `Recommendation ${index + 1}`,\n    colors: rec.colors || [],\n    reasoning: `${rec.application || ''} ${rec.reasoning || ''}`.trim(),\n    originalImage: $('Webhook Trigger').first().json.base64Images[0] // Store first image for 3D generation\n  }));\n  \n  return processedRecommendations.map(rec => ({ json: rec }));\n  \n} catch (error) {\n  throw new Error(`Failed to parse recommendations: ${error.message}`);\n}"
            },
            "id": "parse-recommendations",
            "name": "Parse Recommendations",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                680,
                300
            ]
        },
        {
            "parameters": {},
            "id": "loop-over-recommendations",
            "name": "Loop Over Recommendations",
            "type": "n8n-nodes-base.splitInBatches",
            "typeVersion": 3,
            "position": [
                900,
                300
            ]
        },
        {
            "parameters": {
                "url": "https://openrouter.ai/api/v1/chat/completions",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "Content-Type",
                            "value": "application/json"
                        }
                    ]
                },
                "sendBody": true,
                "bodyParameters": {
                    "parameters": []
                },
                "jsonBody": "={{ {\n  \"model\": \"google/gemini-2.0-flash-exp\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": `Transform this house image into a photorealistic 3D rendering with the following color scheme:\\n\\nColors: ${$json.colors.join(', ')}\\nApplication: ${$json.reasoning}\\n\\nGenerate a high-quality, realistic image showing how this house would look painted with these exact colors. The image should be photorealistic and show the house from the same angle as the original. Return only the generated image.`\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": $json.originalImage\n          }\n        }\n      ]\n    }\n  ],\n  \"max_tokens\": 1000,\n  \"temperature\": 0.3\n} }}",
                "options": {}
            },
            "id": "generate-3d-preview",
            "name": "Generate 3D Preview",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [
                1120,
                300
            ],
            "credentials": {
                "httpHeaderAuth": {
                    "id": "openrouter-api-key",
                    "name": "OpenRouter API Key"
                }
            }
        },
        {
            "parameters": {
                "jsCode": "// Extract the generated image from the AI response\nconst currentItem = $input.first().json;\nconst aiResponse = $input.last().json;\n\ntry {\n  // The AI response should contain the generated image\n  // This will depend on how Gemini returns images - adjust as needed\n  let generatedImage = null;\n  \n  if (aiResponse.choices && aiResponse.choices[0] && aiResponse.choices[0].message) {\n    const message = aiResponse.choices[0].message;\n    \n    // Check if there's image content in the response\n    if (message.content && typeof message.content === 'string') {\n      // If the content is a base64 image string\n      if (message.content.startsWith('data:image/')) {\n        generatedImage = message.content;\n      }\n    } else if (message.content && Array.isArray(message.content)) {\n      // Look for image content in array format\n      const imageContent = message.content.find(item => item.type === 'image_url');\n      if (imageContent && imageContent.image_url && imageContent.image_url.url) {\n        generatedImage = imageContent.image_url.url;\n      }\n    }\n  }\n  \n  // If no image found, use a placeholder or the original image\n  if (!generatedImage) {\n    console.log('No generated image found, using original image as fallback');\n    generatedImage = currentItem.originalImage;\n  }\n  \n  // Combine the recommendation data with the generated image\n  const result = {\n    id: currentItem.id,\n    description: currentItem.description,\n    colors: currentItem.colors,\n    reasoning: currentItem.reasoning,\n    generatedImage: generatedImage\n  };\n  \n  return [{ json: result }];\n  \n} catch (error) {\n  console.error('Error processing 3D preview:', error);\n  \n  // Return the recommendation without generated image on error\n  const result = {\n    id: currentItem.id,\n    description: currentItem.description,\n    colors: currentItem.colors,\n    reasoning: currentItem.reasoning,\n    generatedImage: currentItem.originalImage // Fallback to original\n  };\n  \n  return [{ json: result }];\n}"
            },
            "id": "process-3d-result",
            "name": "Process 3D Result",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                1340,
                300
            ]
        },
        {
            "parameters": {
                "jsCode": "// Aggregate all the processed recommendations with their 3D previews\nconst allItems = $input.all();\n\n// Sort by ID to ensure consistent order\nconst sortedResults = allItems\n  .map(item => item.json)\n  .sort((a, b) => a.id.localeCompare(b.id));\n\n// Clean up the data structure for the final response\nconst finalResults = sortedResults.map(item => ({\n  id: item.id,\n  description: item.description,\n  colors: item.colors,\n  reasoning: item.reasoning,\n  generatedImage: item.generatedImage\n}));\n\nconsole.log(`Returning ${finalResults.length} recommendations with 3D previews`);\n\nreturn [{ json: finalResults }];"
            },
            "id": "aggregate-results",
            "name": "Aggregate Results",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                1560,
                300
            ]
        },
        {
            "parameters": {
                "respondWith": "json",
                "responseBody": "={{ $json }}"
            },
            "id": "respond-to-webhook",
            "name": "Respond to Webhook",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
                1780,
                300
            ]
        }
    ],
    "connections": {
        "Webhook Trigger": {
            "main": [
                [
                    {
                        "node": "Get Color Recommendations",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Get Color Recommendations": {
            "main": [
                [
                    {
                        "node": "Parse Recommendations",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Parse Recommendations": {
            "main": [
                [
                    {
                        "node": "Loop Over Recommendations",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Loop Over Recommendations": {
            "main": [
                [
                    {
                        "node": "Generate 3D Preview",
                        "type": "main",
                        "index": 0
                    }
                ],
                [
                    {
                        "node": "Aggregate Results",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Generate 3D Preview": {
            "main": [
                [
                    {
                        "node": "Process 3D Result",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Process 3D Result": {
            "main": [
                [
                    {
                        "node": "Loop Over Recommendations",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Aggregate Results": {
            "main": [
                [
                    {
                        "node": "Respond to Webhook",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "active": true,
    "settings": {
        "executionOrder": "v1"
    },
    "versionId": "1",
    "meta": {
        "templateCredsSetupCompleted": true
    },
    "id": "ai-color-advisor-workflow",
    "tags": []
}